import freemarker.template.TemplateExceptionHandler
import org.yaml.snakeyaml.LoaderOptions
import org.yaml.snakeyaml.Yaml

import static groovy.io.FileType.FILES

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * To learn more about Gradle by exploring our Samples at https://docs.gradle.org/8.3/samples
 */
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.freemarker:freemarker:2.3.32")
        classpath("org.yaml:snakeyaml:2.2")
    }
}

tasks.register("generate") {
    doLast {
        def sortByName = { a, b ->
            a.name <=> b.name
        }

        List<String> techTypes = List.of("file")
        LoaderOptions loaderOptions = new LoaderOptions()
        Yaml yaml = new Yaml(loaderOptions)
        var workingDir = "${rootProject.projectDir.absolutePath}"
        freemarker.template.Configuration cfg = new freemarker.template.Configuration(freemarker.template.Configuration.VERSION_2_3_32)
        cfg.setDirectoryForTemplateLoading(new File("$workingDir/tech/templates"))
        cfg.setDefaultEncoding("UTF-8")
        var template = cfg.getTemplate("template-index.ftl")

        new File("$workingDir/tech").eachFileRecurse(groovy.io.FileType.DIRECTORIES) { dir ->
            if (dir.name != "templates") {
                var tech = dir.name
                var baseDir = new File("tech/$tech")
                var root = new HashMap()
                var innerTechTypes = new ArrayList()

                baseDir.traverse(type: FILES, sort: sortByName) { file ->
                    var parsedYaml = yaml.load(file.getText())
                    println("Processing: ${parsedYaml["name"]}")
                    root.put(parsedYaml["name"], parsedYaml)
                    innerTechTypes.add(parsedYaml["name"])
                }
                root.put("high_level_tech_name", tech)
                root.put("tech_types", innerTechTypes)
                var outFile = new File("$workingDir/docs/$tech/index.md")
                if (!outFile.parentFile.exists()) {
                    outFile.parentFile.mkdirs()
                }
                if (!outFile.exists()) {
                    outFile.createNewFile()
                }
                var out = new FileWriter(outFile)
                template.process(root, out)
                out.close()

                var mkdocsFile = new File("$workingDir/mkdocs.yml")
                if (!mkdocsFile.text.contains("'$tech/index.md'")) {
                    var cleanTechName = tech.replace("_", " ").capitalize()
                    var updatedMkdocs = mkdocsFile.text.concat("\n  - $cleanTechName: '$tech/index.md'")
                    var mkdocsOut = new FileWriter(mkdocsFile)
                    mkdocsOut.write(updatedMkdocs)
                    mkdocsOut.close()
                }
            }
        }
    }
}